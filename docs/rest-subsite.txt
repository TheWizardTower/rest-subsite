-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Please see the README on GitHub at
--   <a>https://github.com/githubuser/rest-subsite#readme</a>
@package rest-subsite
@version 0.1.0.0


-- | The types that are used in Lib are split out here, to make both files
--   a bit less noisy and easier to work with.
module Types

-- | This is the internal representation of the components of the todo
--   create request.
data CreateTodoRequest
CreateTodoRequest :: Text -> Text -> CreateTodoRequest

-- | Title of the todo. Quick, snappy description of the task.
[ctrTitle] :: CreateTodoRequest -> Text

-- | More in-depth description of the work to be done.
[ctrDescription] :: CreateTodoRequest -> Text

-- | Internal representation of the response of the create todo request. If
--   successful, this will return the todo ID for the user to refer to when
--   they want to refer to or update the todo later.
data CreateTodoResponse
CreateTodoResponse :: Int -> CreateTodoResponse

-- | ID of the todo that was created.
[ctrTid] :: CreateTodoResponse -> Int

-- | If the create request fails, return the request that failed. Don't
--   expose the internal error, as that's a security vulnerability. But, we
--   should add some facility to communicate broadly what went wrong,
--   especially if the failure was due to invalid inputs.
data FailedToCreateTodo
FailedToCreateTodo :: CreateTodoRequest -> FailedToCreateTodo

-- | The originating create request type.
[createReq] :: FailedToCreateTodo -> CreateTodoRequest

-- | This struct is used to represent the result of a read request. As
--   such, it has the title, description, and completed fields you'd
--   expect, as well as the todo ID.
data TodosStruct
TodosStruct :: Text -> Text -> Bool -> Int -> TodosStruct

-- | Title of the todo. Quick, snappy description of the task.
[todoTitle] :: TodosStruct -> Text

-- | More in-depth description of the work to be done.
[todoDescription] :: TodosStruct -> Text

-- | Has the task been completed? True for yes.
[todoCompleted] :: TodosStruct -> Bool

-- | What ID did the database assign to this task?
[tsTid] :: TodosStruct -> Int

-- | This struct is returned as a JSON object if we try to read, update, or
--   delete a todo ID that cannot be found.
data TodoNotFound
TodoNotFound :: Int -> TodoNotFound

-- | The missing Todo ID
[tnfTid] :: TodoNotFound -> Int

-- | We return this type if we run afoul of the invariant that each todo
--   has a unique ID. This really only exists to handle a circumstance that
--   the types allow, but <tt>should</tt> be impossible.
data MultipleTodosFound
MultipleTodosFound :: Int -> MultipleTodosFound

-- | The TID that somehow was found more than once.
[mtfTid] :: MultipleTodosFound -> Int

-- | An update request. If a field is Nothing, then it will be unchanged in
--   the request. Note that this allows for a "no-op" update, but having
--   the types constrain that "at least one field shall be populated" would
--   be ... tricky.
data UpdateTodoRequest
UpdateTodoRequest :: Maybe Text -> Maybe Text -> Maybe Bool -> UpdateTodoRequest

-- | A possible change to a title.
[utrTitle] :: UpdateTodoRequest -> Maybe Text

-- | A possible change to the description.
[utrDescription] :: UpdateTodoRequest -> Maybe Text

-- | A possible change to the finished state.
[utrFinished] :: UpdateTodoRequest -> Maybe Bool

-- | The response returned -- as a JSON object -- on successfully updating
--   a todo entry.
data UpdateTodoResponse
UpdateTodoResponse :: Int -> UpdateTodoResponse

-- | Update was successful, return TID update was performed on
[utrTid] :: UpdateTodoResponse -> Int

-- | The response returned -- as a JSON object -- on successfully deleting
--   a todo entry. Hopefully one we've finished, rather than abandoned.
data DeleteTodoResponse
DeleteTodoResponse :: Int -> DeleteTodoResponse

-- | Update was successful, return TID update was performed on
[dtrTid] :: DeleteTodoResponse -> Int
instance Data.Aeson.Types.FromJSON.FromJSON Types.CreateTodoRequest
instance Data.Aeson.Types.ToJSON.ToJSON Types.CreateTodoRequest
instance GHC.Generics.Generic Types.CreateTodoRequest
instance GHC.Show.Show Types.CreateTodoRequest
instance GHC.Classes.Ord Types.CreateTodoRequest
instance GHC.Classes.Eq Types.CreateTodoRequest
instance Data.Aeson.Types.FromJSON.FromJSON Types.CreateTodoResponse
instance Data.Aeson.Types.ToJSON.ToJSON Types.CreateTodoResponse
instance GHC.Generics.Generic Types.CreateTodoResponse
instance GHC.Show.Show Types.CreateTodoResponse
instance GHC.Classes.Ord Types.CreateTodoResponse
instance GHC.Classes.Eq Types.CreateTodoResponse
instance Data.Aeson.Types.FromJSON.FromJSON Types.FailedToCreateTodo
instance Data.Aeson.Types.ToJSON.ToJSON Types.FailedToCreateTodo
instance GHC.Generics.Generic Types.FailedToCreateTodo
instance GHC.Show.Show Types.FailedToCreateTodo
instance GHC.Classes.Ord Types.FailedToCreateTodo
instance GHC.Classes.Eq Types.FailedToCreateTodo
instance Database.PostgreSQL.Simple.FromField.FromField Types.TodosStruct
instance Database.PostgreSQL.Simple.ToRow.ToRow Types.TodosStruct
instance Database.PostgreSQL.Simple.FromRow.FromRow Types.TodosStruct
instance Data.Aeson.Types.FromJSON.FromJSON Types.TodosStruct
instance Data.Aeson.Types.ToJSON.ToJSON Types.TodosStruct
instance GHC.Generics.Generic Types.TodosStruct
instance GHC.Show.Show Types.TodosStruct
instance GHC.Classes.Ord Types.TodosStruct
instance GHC.Classes.Eq Types.TodosStruct
instance Data.Aeson.Types.FromJSON.FromJSON Types.TodoNotFound
instance Data.Aeson.Types.ToJSON.ToJSON Types.TodoNotFound
instance GHC.Generics.Generic Types.TodoNotFound
instance GHC.Show.Show Types.TodoNotFound
instance GHC.Classes.Ord Types.TodoNotFound
instance GHC.Classes.Eq Types.TodoNotFound
instance Data.Aeson.Types.FromJSON.FromJSON Types.MultipleTodosFound
instance Data.Aeson.Types.ToJSON.ToJSON Types.MultipleTodosFound
instance GHC.Generics.Generic Types.MultipleTodosFound
instance GHC.Show.Show Types.MultipleTodosFound
instance GHC.Classes.Ord Types.MultipleTodosFound
instance GHC.Classes.Eq Types.MultipleTodosFound
instance Data.Aeson.Types.FromJSON.FromJSON Types.UpdateTodoRequest
instance Data.Aeson.Types.ToJSON.ToJSON Types.UpdateTodoRequest
instance GHC.Generics.Generic Types.UpdateTodoRequest
instance GHC.Show.Show Types.UpdateTodoRequest
instance GHC.Classes.Ord Types.UpdateTodoRequest
instance GHC.Classes.Eq Types.UpdateTodoRequest
instance Data.Aeson.Types.FromJSON.FromJSON Types.UpdateTodoResponse
instance Data.Aeson.Types.ToJSON.ToJSON Types.UpdateTodoResponse
instance GHC.Generics.Generic Types.UpdateTodoResponse
instance GHC.Show.Show Types.UpdateTodoResponse
instance GHC.Classes.Ord Types.UpdateTodoResponse
instance GHC.Classes.Eq Types.UpdateTodoResponse
instance Data.Aeson.Types.FromJSON.FromJSON Types.DeleteTodoResponse
instance Data.Aeson.Types.ToJSON.ToJSON Types.DeleteTodoResponse
instance GHC.Generics.Generic Types.DeleteTodoResponse
instance GHC.Show.Show Types.DeleteTodoResponse
instance GHC.Classes.Ord Types.DeleteTodoResponse
instance GHC.Classes.Eq Types.DeleteTodoResponse


-- | This is an experimental playground for how to maintain documentation
--   for a REST endpoint and associated datatypes, and hosting the
--   associated documentation for both.
module Lib
runServer :: IO ()

-- | The handler for the base route.
getHomeR :: Handler Html
getReadAllTodosR :: Handler Value

-- | Endpoint to create a TODO. Consumes a JSON body that matches up with
--   the CreateTodoRequest type. Returns a CreateTodoResponse with the Todo
--   ID, or a FailedToCreateTodo message on failure.
postRestCreateR :: Handler Value
instance GHC.Read.Read (Yesod.Routes.Class.Route Lib.MyRest)
instance GHC.Show.Show (Yesod.Routes.Class.Route Lib.MyRest)
instance GHC.Classes.Eq (Yesod.Routes.Class.Route Lib.MyRest)
instance Yesod.Routes.Class.ParseRoute Lib.MyRest
instance Yesod.Routes.Class.RenderRoute Lib.MyRest
instance Yesod.Routes.Class.RouteAttrs Lib.MyRest
instance Yesod.Core.Class.Dispatch.YesodDispatch Lib.MyRest
instance Yesod.Core.Class.Yesod.Yesod Lib.MyRest
